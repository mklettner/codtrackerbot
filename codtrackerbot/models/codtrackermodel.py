# generated by datamodel-codegen:
#   filename:  last-match.json
#   timestamp: 2021-12-02T20:19:43+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List, Optional

from pydantic import BaseModel


class AvgKd(BaseModel):
    kd: float
    pct: float


class Attributes(BaseModel):
    id: str
    mapId: str
    modeId: str
    avgKd: Optional[AvgKd]


class Duration(BaseModel):
    value: int
    displayValue: str
    displayType: str


class Metadata(BaseModel):
    duration: Duration
    timestamp: datetime
    playerCount: int
    teamCount: int
    mapName: str
    mapImageUrl: str
    modeName: str


class Attributes1(BaseModel):
    platformUserIdentifier: str
    platformSlug: str
    team: str


class Stats(BaseModel):
    kills: int
    deaths: int
    placement: int
    timePlayed: int


class Teammate(BaseModel):
    platformUserId: str
    platformUserHandle: str
    clantag: Any
    stats: Stats


class Metadata1(BaseModel):
    platformUserHandle: str
    clanTag: str
    placement: Optional[int]
    teammates: Optional[List[Teammate]]


class Kills(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class MedalXp(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class ObjectiveTeamWiped(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class ObjectiveLastStandKill(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class MatchXp(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class ScoreXp(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class WallBangs(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class Score(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class TotalXp(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class Headshots(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class Assists(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class ChallengeXp(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class ScorePerMinute(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class DistanceTraveled(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class TeamSurvivalTime(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class Deaths(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class KdRatio(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class ObjectiveBrDownEnemyCircle2(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class ObjectiveBrDownEnemyCircle1(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class ObjectiveBrMissionPickupTablet(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class BonusXp(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class ObjectiveReviver(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class ObjectiveBrKioskBuy(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class GulagDeaths(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class TimePlayed(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class Executions(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class GulagKills(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class Nearmisses(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class ObjectiveBrCacheOpen(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class PercentTimeMoving(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class MiscXp(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class LongestStreak(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class TeamPlacement(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class DamageDone(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class DamageTaken(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class DamageDonePerMinute(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class Placement(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: Optional[str]
    category: Optional[str]
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class Stats1(BaseModel):
    kills: Kills
    medalXp: MedalXp
    objectiveTeamWiped: Optional[ObjectiveTeamWiped]
    objectiveLastStandKill: Optional[ObjectiveLastStandKill]
    matchXp: MatchXp
    scoreXp: ScoreXp
    wallBangs: WallBangs
    score: Score
    totalXp: TotalXp
    headshots: Optional[Headshots]
    assists: Optional[Assists]
    challengeXp: Optional[ChallengeXp]
    scorePerMinute: ScorePerMinute
    distanceTraveled: DistanceTraveled
    teamSurvivalTime: Optional[TeamSurvivalTime]
    deaths: Optional[Deaths]
    kdRatio: KdRatio
    objectiveBrDownEnemyCircle2: Optional[ObjectiveBrDownEnemyCircle2]
    objectiveBrDownEnemyCircle1: Optional[ObjectiveBrDownEnemyCircle1]
    objectiveBrMissionPickupTablet: Optional[ObjectiveBrMissionPickupTablet]
    bonusXp: Optional[BonusXp]
    objectiveReviver: Optional[ObjectiveReviver]
    objectiveBrKioskBuy: Optional[ObjectiveBrKioskBuy]
    gulagDeaths: Optional[GulagDeaths]
    timePlayed: TimePlayed
    executions: Optional[Executions]
    gulagKills: Optional[GulagKills]
    nearmisses: Optional[Nearmisses]
    objectiveBrCacheOpen: Optional[ObjectiveBrCacheOpen]
    percentTimeMoving: PercentTimeMoving
    miscXp: Optional[MiscXp]
    longestStreak: LongestStreak
    teamPlacement: Optional[TeamPlacement]
    damageDone: DamageDone
    damageTaken: DamageTaken
    damageDonePerMinute: DamageDonePerMinute
    placement: Optional[Placement]


class Segment(BaseModel):
    type: str
    attributes: Attributes1
    metadata: Metadata1
    expiryDate: str
    stats: Stats1


class Match(BaseModel):
    attributes: Attributes
    metadata: Metadata
    segments: List[Segment]
    expiryDate: str
